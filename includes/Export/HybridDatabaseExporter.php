<?php

namespace WP_Easy_Migrate\Export;

class DatabaseExporter
{
    private $logger;
    private $use_mysqldump = null;

    public function __construct($logger)
    {
        $this->logger = $logger;
    }

    /**
     * Check if mysqldump is available
     */
    private function isMysqldumpAvailable(): bool
    {
        if ($this->use_mysqldump !== null) {
            return $this->use_mysqldump;
        }

        // Check if exec is disabled
        if (!function_exists('exec')) {
            $this->logger->log('exec() function is disabled', 'info');
            $this->use_mysqldump = false;
            return false;
        }

        // Check if mysqldump command exists
        $output = [];
        $return_code = 0;
        exec('mysqldump --version 2>&1', $output, $return_code);

        if ($return_code === 0) {
            $this->logger->log('mysqldump is available: ' . implode(' ', $output), 'info');
            $this->use_mysqldump = true;
            return true;
        } else {
            $this->logger->log('mysqldump not available, falling back to PHP export', 'info');
            $this->use_mysqldump = false;
            return false;
        }
    }

    /**
     * Export database using best available method
     */
    public function export(string $export_dir): string
    {
        if ($this->isMysqldumpAvailable()) {
            return $this->exportWithMysqldump($export_dir);
        } else {
            return $this->exportWithPHP($export_dir);
        }
    }

    /**
     * Export using mysqldump (fast, reliable)
     */
    private function exportWithMysqldump(string $export_dir): string
    {
        $db_file = $export_dir . 'database.sql';

        $host = DB_HOST;
        $user = DB_USER;
        $password = DB_PASSWORD;
        $database = DB_NAME;

        // Handle port in host (e.g., "localhost:3306")
        $port = 3306;
        if (strpos($host, ':') !== false) {
            list($host, $port) = explode(':', $host, 2);
        }

        $command = sprintf(
            'mysqldump --host=%s --port=%s --user=%s --password=%s --single-transaction --routines --triggers --add-drop-table %s > %s',
            escapeshellarg($host),
            escapeshellarg($port),
            escapeshellarg($user),
            escapeshellarg($password),
            escapeshellarg($database),
            escapeshellarg($db_file)
        );

        $output = [];
        $return_code = 0;
        exec($command . ' 2>&1', $output, $return_code);

        if ($return_code !== 0) {
            $this->logger->log('mysqldump failed: ' . implode("\n", $output), 'error');
            // Fall back to PHP method
            return $this->exportWithPHP($export_dir);
        }

        if (!file_exists($db_file) || filesize($db_file) === 0) {
            $this->logger->log('mysqldump produced empty file, falling back to PHP', 'warning');
            return $this->exportWithPHP($export_dir);
        }

        $this->logger->log('Database exported with mysqldump: ' . size_format(filesize($db_file)), 'info');
        return $db_file;
    }

    /**
     * Export using PHP/WordPress functions (compatible everywhere)
     */
    private function exportWithPHP(string $export_dir): string
    {
        global $wpdb;

        $db_file = $export_dir . 'database.sql';

        // Start with SQL header
        $sql_content = "-- WordPress Database Export\n";
        $sql_content .= "-- Generated by WP Easy Migrate\n";
        $sql_content .= "-- Date: " . current_time('mysql') . "\n\n";
        $sql_content .= "SET FOREIGN_KEY_CHECKS=0;\n";
        $sql_content .= "SET SQL_MODE='NO_AUTO_VALUE_ON_ZERO';\n\n";

        file_put_contents($db_file, $sql_content);

        // Get all tables
        $tables = $wpdb->get_results("SHOW TABLES", ARRAY_N);

        foreach ($tables as $table) {
            $table_name = $table[0];

            // Get table structure
            $create_table = $wpdb->get_row("SHOW CREATE TABLE `{$table_name}`", ARRAY_N);
            if ($create_table) {
                $table_sql = "\n-- Table: {$table_name}\n";
                $table_sql .= "DROP TABLE IF EXISTS `{$table_name}`;\n";
                $table_sql .= $create_table[1] . ";\n\n";

                file_put_contents($db_file, $table_sql, FILE_APPEND);
            }

            // Export data using WordPress functions (handles escaping automatically)
            $rows = $wpdb->get_results("SELECT * FROM `{$table_name}`", ARRAY_A);

            if (!empty($rows)) {
                $columns = array_keys($rows[0]);
                $escaped_columns = array_map(function ($col) {
                    return "`{$col}`";
                }, $columns);

                foreach ($rows as $row) {
                    // Use WordPress prepare() for safe SQL generation
                    $placeholders = array_fill(0, count($columns), '%s');
                    $sql = $wpdb->prepare(
                        "INSERT INTO `{$table_name}` (" . implode(',', $escaped_columns) . ") VALUES (" . implode(',', $placeholders) . ");\n",
                        ...array_values($row)
                    );

                    file_put_contents($db_file, $sql, FILE_APPEND);
                }

                file_put_contents($db_file, "\n", FILE_APPEND);
            }
        }

        // Add footer
        $sql_footer = "SET FOREIGN_KEY_CHECKS=1;\n";
        file_put_contents($db_file, $sql_footer, FILE_APPEND);

        $this->logger->log('Database exported with PHP: ' . size_format(filesize($db_file)), 'info');
        return $db_file;
    }

    /**
     * Export database chunk (for compatibility)
     */
    public function exportChunk(\WPEasyMigrate\ExportSession $session): array
    {
        if (!$session->get_db_export_path()) {
            $export_dir = $session->get_export_dir();
            $db_file = $this->export($export_dir);
            $session->set_db_export_path($db_file);

            // Mark completion
            global $wpdb;
            $tables = $wpdb->get_results("SHOW TABLES", ARRAY_N);
            foreach ($tables as $table) {
                $session->mark_table_completed($table[0]);
            }
        }

        return ['message' => __('Database export completed', 'wp-easy-migrate')];
    }
}